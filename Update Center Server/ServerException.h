#pragma once

#include <exception>
#include <string>

/*
1. Ошибки при создании сокета:
   - Недостаточно ресурсов (памяти, файловых дескрипторов и т.д.) для создания нового сокета.
   - Неверно указан тип сокета (например, TCP вместо UDP).

2. Ошибки при привязке сокета к адресу и порту:
   - Порт уже используется другим приложением.
   - Указан недопустимый адрес или порт.
   - Недостаточно прав для привязки к указанному адресу или порту.

3. Ошибки при прослушивании входящих соединений:
   - Неверно указан размер очереди входящих соединений.
   - Недостаточно ресурсов для прослушивания входящих соединений.

4. Ошибки при приеме или отправке данных:
   - Соединение было разорвано удаленным узлом.
   - Произошла ошибка во время передачи данных (потеря пакетов, сбой сети и т.д.).
   - Недостаточно буферного пространства для приема данных.

5. Ошибки при обработке множественных клиентов:
   - Ошибки при обработке нескольких соединений одновременно (гонки данных, deadlock и т.д.).
   - Утечки ресурсов (незакрытые сокеты, незавершенные потоки и т.д.).

6. Ошибки при обработке ошибок:
   - Неправильная обработка ошибок, возникающих при работе с сокетами.
   - Недостаточная диагностика и журналирование ошибок.

7. Ошибки безопасности:
   - Уязвимости к атакам, таким как переполнение буфера, отказ в обслуживании и т.д.
   - Недостаточная проверка входных данных от клиентов.

8. Ошибки конфигурации:
   - Неправильная конфигурация сетевых параметров (брандмауэры, маршрутизация и т.д.).
   - Неверные настройки сервера (временные ограничения, размеры буферов и т.д.).

9. Ошибки производительности:
    - Неэффективное использование ресурсов (высокая нагрузка на CPU, высокое потребление памяти и т.д.).
    - Недостаточная оптимизация алгоритмов обработки данных.
*/


enum ErrorCode
{
    SettingsInitError = 40,
    Ws2_32LoadingError = 87,
    CreateSocketError = 10044,
    BindSocketError = 10046,
    ListenSocketError = 10047,
    SendReceiveError = 10050,
    ClientRequestError = 10065,
    MultiClientHandlingError = 10100,
    ErrorHandlingError = 10200,
    SecurityError = 10300,
    ConfigurationError = 10400,
    PerformanceError = 10500
};

class ServerException : std::exception
{
private:
	int errorCode;

	std::string errorMessage;

public:
	ServerException(int errorCode, std::string errorMessage);

    ServerException(std::string errorMessage);

    std::string What();
};